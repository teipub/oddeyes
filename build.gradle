buildscript {
    ext.kotlin_version = '1.0.3'
    ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath "de.richsource.gradle.plugins:typescript-gradle-plugin:1.8.0"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'com.moowork.node'
apply plugin: "de.richsource.gradle.plugins.typescript"

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}


war {
	baseName = 'teipub-oddeyes'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

bootRun {
    addResources = true
}

configurations {
	providedRuntime
}

dependencies {
//    compile('org.springframework.boot:spring-boot-starter-data-jpa')
//	compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-devtools')
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile('org.projectlombok:lombok')

    compile('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
    download = true
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

compileTypeScript {
    compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"
}

compileTypeScript {
    sourcemap = true
    outputDir new File("$buildDir/resources/main/static/ts")
}